///
/// JHybridHapticsSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridHapticsSpec.hpp"

// Forward declaration of `NotificationFeedbackType` to properly resolve imports.
namespace margelo::nitro::haptics { enum class NotificationFeedbackType; }
// Forward declaration of `ImpactFeedbackStyle` to properly resolve imports.
namespace margelo::nitro::haptics { enum class ImpactFeedbackStyle; }

#include "NotificationFeedbackType.hpp"
#include "JNotificationFeedbackType.hpp"
#include "ImpactFeedbackStyle.hpp"
#include "JImpactFeedbackStyle.hpp"

namespace margelo::nitro::haptics {

  jni::local_ref<JHybridHapticsSpec::jhybriddata> JHybridHapticsSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridHapticsSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridHapticsSpec::initHybrid),
    });
  }

  size_t JHybridHapticsSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridHapticsSpec::notification(NotificationFeedbackType style) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<JNotificationFeedbackType> /* style */)>("notification");
    method(_javaPart, JNotificationFeedbackType::fromCpp(style));
  }
  void JHybridHapticsSpec::impact(ImpactFeedbackStyle style) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<JImpactFeedbackStyle> /* style */)>("impact");
    method(_javaPart, JImpactFeedbackStyle::fromCpp(style));
  }
  void JHybridHapticsSpec::selection() {
    static const auto method = _javaPart->getClass()->getMethod<void()>("selection");
    method(_javaPart);
  }

} // namespace margelo::nitro::haptics
